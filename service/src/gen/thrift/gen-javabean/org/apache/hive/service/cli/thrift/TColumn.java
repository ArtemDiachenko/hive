/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hive.service.cli.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TColumn extends org.apache.thrift.TUnion<TColumn, TColumn._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");
  private static final org.apache.thrift.protocol.TField BOOL_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("boolColumn", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("byteColumn", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField I16_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Column", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField I32_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Column", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField I64_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Column", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleColumn", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("stringColumn", org.apache.thrift.protocol.TType.LIST, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_COLUMN((short)1, "boolColumn"),
    BYTE_COLUMN((short)2, "byteColumn"),
    I16_COLUMN((short)3, "i16Column"),
    I32_COLUMN((short)4, "i32Column"),
    I64_COLUMN((short)5, "i64Column"),
    DOUBLE_COLUMN((short)6, "doubleColumn"),
    STRING_COLUMN((short)7, "stringColumn");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_COLUMN
          return BOOL_COLUMN;
        case 2: // BYTE_COLUMN
          return BYTE_COLUMN;
        case 3: // I16_COLUMN
          return I16_COLUMN;
        case 4: // I32_COLUMN
          return I32_COLUMN;
        case 5: // I64_COLUMN
          return I64_COLUMN;
        case 6: // DOUBLE_COLUMN
          return DOUBLE_COLUMN;
        case 7: // STRING_COLUMN
          return STRING_COLUMN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("boolColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBoolValue.class))));
    tmpMap.put(_Fields.BYTE_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("byteColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TByteValue.class))));
    tmpMap.put(_Fields.I16_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("i16Column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TI16Value.class))));
    tmpMap.put(_Fields.I32_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("i32Column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TI32Value.class))));
    tmpMap.put(_Fields.I64_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("i64Column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TI64Value.class))));
    tmpMap.put(_Fields.DOUBLE_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("doubleColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDoubleValue.class))));
    tmpMap.put(_Fields.STRING_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("stringColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStringValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumn.class, metaDataMap);
  }

  public TColumn() {
    super();
  }

  public TColumn(_Fields setField, Object value) {
    super(setField, value);
  }

  public TColumn(TColumn other) {
    super(other);
  }
  public TColumn deepCopy() {
    return new TColumn(this);
  }

  public static TColumn boolColumn(List<TBoolValue> value) {
    TColumn x = new TColumn();
    x.setBoolColumn(value);
    return x;
  }

  public static TColumn byteColumn(List<TByteValue> value) {
    TColumn x = new TColumn();
    x.setByteColumn(value);
    return x;
  }

  public static TColumn i16Column(List<TI16Value> value) {
    TColumn x = new TColumn();
    x.setI16Column(value);
    return x;
  }

  public static TColumn i32Column(List<TI32Value> value) {
    TColumn x = new TColumn();
    x.setI32Column(value);
    return x;
  }

  public static TColumn i64Column(List<TI64Value> value) {
    TColumn x = new TColumn();
    x.setI64Column(value);
    return x;
  }

  public static TColumn doubleColumn(List<TDoubleValue> value) {
    TColumn x = new TColumn();
    x.setDoubleColumn(value);
    return x;
  }

  public static TColumn stringColumn(List<TStringValue> value) {
    TColumn x = new TColumn();
    x.setStringColumn(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case BOOL_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TBoolValue> for field 'boolColumn', but got " + value.getClass().getSimpleName());
      case BYTE_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TByteValue> for field 'byteColumn', but got " + value.getClass().getSimpleName());
      case I16_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TI16Value> for field 'i16Column', but got " + value.getClass().getSimpleName());
      case I32_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TI32Value> for field 'i32Column', but got " + value.getClass().getSimpleName());
      case I64_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TI64Value> for field 'i64Column', but got " + value.getClass().getSimpleName());
      case DOUBLE_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TDoubleValue> for field 'doubleColumn', but got " + value.getClass().getSimpleName());
      case STRING_COLUMN:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<TStringValue> for field 'stringColumn', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object readValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BOOL_COLUMN:
          if (field.type == BOOL_COLUMN_FIELD_DESC.type) {
            List<TBoolValue> boolColumn;
            {
              org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
              boolColumn = new ArrayList<TBoolValue>(_list18.size);
              for (int _i19 = 0; _i19 < _list18.size; ++_i19)
              {
                TBoolValue _elem20; // required
                _elem20 = new TBoolValue();
                _elem20.read(iprot);
                boolColumn.add(_elem20);
              }
              iprot.readListEnd();
            }
            return boolColumn;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_COLUMN:
          if (field.type == BYTE_COLUMN_FIELD_DESC.type) {
            List<TByteValue> byteColumn;
            {
              org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
              byteColumn = new ArrayList<TByteValue>(_list21.size);
              for (int _i22 = 0; _i22 < _list21.size; ++_i22)
              {
                TByteValue _elem23; // required
                _elem23 = new TByteValue();
                _elem23.read(iprot);
                byteColumn.add(_elem23);
              }
              iprot.readListEnd();
            }
            return byteColumn;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I16_COLUMN:
          if (field.type == I16_COLUMN_FIELD_DESC.type) {
            List<TI16Value> i16Column;
            {
              org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
              i16Column = new ArrayList<TI16Value>(_list24.size);
              for (int _i25 = 0; _i25 < _list24.size; ++_i25)
              {
                TI16Value _elem26; // required
                _elem26 = new TI16Value();
                _elem26.read(iprot);
                i16Column.add(_elem26);
              }
              iprot.readListEnd();
            }
            return i16Column;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_COLUMN:
          if (field.type == I32_COLUMN_FIELD_DESC.type) {
            List<TI32Value> i32Column;
            {
              org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
              i32Column = new ArrayList<TI32Value>(_list27.size);
              for (int _i28 = 0; _i28 < _list27.size; ++_i28)
              {
                TI32Value _elem29; // required
                _elem29 = new TI32Value();
                _elem29.read(iprot);
                i32Column.add(_elem29);
              }
              iprot.readListEnd();
            }
            return i32Column;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I64_COLUMN:
          if (field.type == I64_COLUMN_FIELD_DESC.type) {
            List<TI64Value> i64Column;
            {
              org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
              i64Column = new ArrayList<TI64Value>(_list30.size);
              for (int _i31 = 0; _i31 < _list30.size; ++_i31)
              {
                TI64Value _elem32; // required
                _elem32 = new TI64Value();
                _elem32.read(iprot);
                i64Column.add(_elem32);
              }
              iprot.readListEnd();
            }
            return i64Column;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_COLUMN:
          if (field.type == DOUBLE_COLUMN_FIELD_DESC.type) {
            List<TDoubleValue> doubleColumn;
            {
              org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
              doubleColumn = new ArrayList<TDoubleValue>(_list33.size);
              for (int _i34 = 0; _i34 < _list33.size; ++_i34)
              {
                TDoubleValue _elem35; // required
                _elem35 = new TDoubleValue();
                _elem35.read(iprot);
                doubleColumn.add(_elem35);
              }
              iprot.readListEnd();
            }
            return doubleColumn;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_COLUMN:
          if (field.type == STRING_COLUMN_FIELD_DESC.type) {
            List<TStringValue> stringColumn;
            {
              org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
              stringColumn = new ArrayList<TStringValue>(_list36.size);
              for (int _i37 = 0; _i37 < _list36.size; ++_i37)
              {
                TStringValue _elem38; // required
                _elem38 = new TStringValue();
                _elem38.read(iprot);
                stringColumn.add(_elem38);
              }
              iprot.readListEnd();
            }
            return stringColumn;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void writeValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOL_COLUMN:
        List<TBoolValue> boolColumn = (List<TBoolValue>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, boolColumn.size()));
          for (TBoolValue _iter39 : boolColumn)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case BYTE_COLUMN:
        List<TByteValue> byteColumn = (List<TByteValue>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, byteColumn.size()));
          for (TByteValue _iter40 : byteColumn)
          {
            _iter40.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case I16_COLUMN:
        List<TI16Value> i16Column = (List<TI16Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, i16Column.size()));
          for (TI16Value _iter41 : i16Column)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case I32_COLUMN:
        List<TI32Value> i32Column = (List<TI32Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, i32Column.size()));
          for (TI32Value _iter42 : i32Column)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case I64_COLUMN:
        List<TI64Value> i64Column = (List<TI64Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, i64Column.size()));
          for (TI64Value _iter43 : i64Column)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case DOUBLE_COLUMN:
        List<TDoubleValue> doubleColumn = (List<TDoubleValue>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, doubleColumn.size()));
          for (TDoubleValue _iter44 : doubleColumn)
          {
            _iter44.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_COLUMN:
        List<TStringValue> stringColumn = (List<TStringValue>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, stringColumn.size()));
          for (TStringValue _iter45 : stringColumn)
          {
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BOOL_COLUMN:
        return BOOL_COLUMN_FIELD_DESC;
      case BYTE_COLUMN:
        return BYTE_COLUMN_FIELD_DESC;
      case I16_COLUMN:
        return I16_COLUMN_FIELD_DESC;
      case I32_COLUMN:
        return I32_COLUMN_FIELD_DESC;
      case I64_COLUMN:
        return I64_COLUMN_FIELD_DESC;
      case DOUBLE_COLUMN:
        return DOUBLE_COLUMN_FIELD_DESC;
      case STRING_COLUMN:
        return STRING_COLUMN_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public List<TBoolValue> getBoolColumn() {
    if (getSetField() == _Fields.BOOL_COLUMN) {
      return (List<TBoolValue>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'boolColumn' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoolColumn(List<TBoolValue> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.BOOL_COLUMN;
    value_ = value;
  }

  public List<TByteValue> getByteColumn() {
    if (getSetField() == _Fields.BYTE_COLUMN) {
      return (List<TByteValue>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'byteColumn' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setByteColumn(List<TByteValue> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.BYTE_COLUMN;
    value_ = value;
  }

  public List<TI16Value> getI16Column() {
    if (getSetField() == _Fields.I16_COLUMN) {
      return (List<TI16Value>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i16Column' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI16Column(List<TI16Value> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I16_COLUMN;
    value_ = value;
  }

  public List<TI32Value> getI32Column() {
    if (getSetField() == _Fields.I32_COLUMN) {
      return (List<TI32Value>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32Column' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32Column(List<TI32Value> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I32_COLUMN;
    value_ = value;
  }

  public List<TI64Value> getI64Column() {
    if (getSetField() == _Fields.I64_COLUMN) {
      return (List<TI64Value>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i64Column' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI64Column(List<TI64Value> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I64_COLUMN;
    value_ = value;
  }

  public List<TDoubleValue> getDoubleColumn() {
    if (getSetField() == _Fields.DOUBLE_COLUMN) {
      return (List<TDoubleValue>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubleColumn' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleColumn(List<TDoubleValue> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DOUBLE_COLUMN;
    value_ = value;
  }

  public List<TStringValue> getStringColumn() {
    if (getSetField() == _Fields.STRING_COLUMN) {
      return (List<TStringValue>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringColumn' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringColumn(List<TStringValue> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_COLUMN;
    value_ = value;
  }

  public boolean isSetBoolColumn() {
    return setField_ == _Fields.BOOL_COLUMN;
  }


  public boolean isSetByteColumn() {
    return setField_ == _Fields.BYTE_COLUMN;
  }


  public boolean isSetI16Column() {
    return setField_ == _Fields.I16_COLUMN;
  }


  public boolean isSetI32Column() {
    return setField_ == _Fields.I32_COLUMN;
  }


  public boolean isSetI64Column() {
    return setField_ == _Fields.I64_COLUMN;
  }


  public boolean isSetDoubleColumn() {
    return setField_ == _Fields.DOUBLE_COLUMN;
  }


  public boolean isSetStringColumn() {
    return setField_ == _Fields.STRING_COLUMN;
  }


  public boolean equals(Object other) {
    if (other instanceof TColumn) {
      return equals((TColumn)other);
    } else {
      return false;
    }
  }

  public boolean equals(TColumn other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TColumn other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
